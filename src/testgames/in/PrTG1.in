(define diff (x y) (+ x (- y)))
(define * (x y) (if (= x 0) 0 (+ y (* (diff x 1) y))))
(define / (x y) (if (< y x) (+ 1 (/ (diff x y) y)) (if (= x y) 1 0)))

(define true 1)
(define false 0)
(define xor (x y) (if (= x (not y)) 1 0))
(define nor (x y) (not (or x y)))
(define nand (x y) (not (and x y)))

(define ++ (x) (+ x 1))
(define -- (x) (diff x 1))

(define % (x y) (diff x (* y (/ x y))))
(define ^ (x y) (if (= y 0) 1 (* x (^ x (diff y 1)))))
(define ! (x) (if (= x 1) 1 (* x (! (diff x 1)))))

(define abs (x) (if (< x 0) (- x) x))
(define count (x) (if (= x 0) 0 (+ 1 (count (/ x 10)))))

(define > (x y) (< y x))
(define <= (x y) (or (< x y) (= x y)))
(define >= (x y) (or (< y x) (= x y)))
(define == (x y) (= x y))
(define != (x y) (not (= x y)))
(define max (x y) (if (< x y) y x))
(define min (x y) (if (< x y) x y))

(define length (l) (if (= l ()) 0 (+ 1 (length (tail l)))))
(define last (l) (if (= () (tail l)) (head l) (last (tail l))))
(define real (e f) (cons e (f)))
(define ceil (r) (if (= (last r) 0) r (cons (+ (head r) 1) (0))))
(define floor (r) (cons (head r) (0)))

(define fibonacci (a) (if (< a 2) 1 (+ (fibonacci (diff a 1)) (fibonacci (diff a 2)))))

(diff 3 2)
(* 52 54)
(/ 125 5)

(xor false true)
(nor false false)
(nand true true)

(++ 1)
(-- 0)

(% 7645 84)
(^ 8 3)
(! 12)

(abs -9435)
(count 1632)

(> 3 2)
(<= 3 2)
(>= 3 2)
(== 3 2)
(!= 3 2)
(max 47568 433)
(min 74765 34)

(length (345 3223432   678  876    32 4 5 ))
(last (435 453 65576 34 2))
(real 4 5)
(ceil (4 5))
(floor (4 5))

(fibonacci 20)

****
