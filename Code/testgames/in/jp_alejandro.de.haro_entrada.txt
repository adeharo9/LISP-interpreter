((()))
((((((((((((((((((((((((((((()))))))))))))))))))))))))))))
(()()())
(- (-0))
(- (- 0))
(- (-1))
(- (- 1))
(- - (- 0))
(- (- (- (- (- 4)))))

(tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail 


  



 
 


  
                     



   













             
     





 
(tail (tail (tail (tail (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)))))))))))))))))))))

(define x 10)
(define y 20)


(define diff (x y) (+ x (- y)))
(define * (x y) (if (= x 0) 0 (+ y (* (diff x 1) y))))

(define z () x)
z
(define z () 15)
z
(z)
(define ax (z))

(+ 1 z)
(+ 1 (z))
(head (z))
(head ((z)))
((z))

(diff 943953745 8283748)
(* 1000 1000)
(% 543533333234 7)

(define % (x y) (diff x (* y (/ x y))))

(% 32423 85)

(define / (x y) (if (< y x) (+ 1 (/ (diff x y) y)) (if (= x y) 1 0)))

(% 24241 85)

(define ^ (x y) (if (= y 0) 1 (* x (^ x (diff y 1)))))
(define ! (x) (if (= x 1) 1 (* x (! (diff x 1)))))

(^ 2 8)
(! 8)
(! 12)
(! 12 3)

(define abs (x) (if (< x 0) (- x) x))

(abs -0)
(abs (- (- (- (- (- (- (- (- (- 345))))))))))
(abs (- -4))

(define l (123 453 65 7 7 112 21 34 4 1 23 3213 23 4 54 56 7 67 453441 23 233 45 6 5 43 2  45 67 8  876 543 2  3 45 67 89   87 654 32 ))

(define length (l) (if (= l ()) 0 (+ 1 (length (tail l)))))
(length (head l))
(length l)
(length (tail l))

(define last (l) (if (= () (tail l)) (head l) (last (tail l))))

(last l)

(define supertail (l) (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail (tail l)))))))))))))))))))))

(supertail l)

(abs (- (^ 6 11)))

(define count (x) (if (= x 0) 0 (+ 1 (count (/ x 10)))))

(count 3742)

(define fibonacci (a) (if (< a 2) 1 (+ (fibonacci (diff a 1)) (fibonacci (diff a 2)))))

(fibonacci 21)

((z) x)
(define z (x) (- x))
(z x)

****

Los comentarios a continuación hacen referencia a cada línea del juego de pruebas.

Las instrucciones de las líneas 1 a 7 ponen a prueba algunos casos simples pero representativos del tratamiento de expresiones parentizadas y con signos negativos. Pone a prueba la capacidad del algoritmo de parsing para tratar los paréntesis y diferenciar los signos negativos de la operación.

La instrucción de las líneas 11 a 49 pone a prueba el algoritmo de parsing con lo que respecta a tratamiento de saltos de línea. También pone a prueba la capacidad del programa para procesar expresiones que contienen expresiones a niveles profundos.

Las definiciones de las líneas 51 y 52 sirven tan sólo como cebo para las definiciones de operaciones posteriores, ya que aunque los parámetros de las operaciones se han definido con el mismo nombre que estas variables, en ningún momento se debería poder acceder a ellas.

La operación de la línea 56 permitirá poner a prueba más adelante las capacidades de recursividad (y por lo tanto la eficiencia tanto en tiempo como de uso de memoria) del programa.

La definición de la línea 58 es un caso especial, ya que es una operación que no tiene ningún argumento y cuya expresión es una constate, por lo que a todos los efectos es una variable. Sin embargo, el programa debe tratarla como operación de forma correcta, de forma que en este caso debería guardarse pero su valor debería ser siempre indefinido, ya que en su definición se accede a una variable que no es parámetro.

La instrucción de la línea 59 permite probar que efectivamente no se ha accedido a la variable x en la definción de la operación.

La línea 60 permite poner a prueba  el caso de la línea 58, pero en este caso la operación debería siempre evaluarse a un número entero.

La línea 61 permite comprobar que, a pesar de actuar como una variable, no se ha almacenado el contenido de la operación z como tal.

Mediante la llamada de la línea 62 a la operación z, se debería obtener su valor (un entero, aunque la parentización de la operación pueda despistar).

En la línea 63 se ponen a prueba dos puntos: el primero, la capacidad de acceder a una operación definida por el usuario al crear una variable; el segundo, la capacidad de almacenar correctamente el valor de la variable, ya que a pesar de la parentización, la operación devuelve un entero y el resultado de la definición debería ser entero, no lista.

Las líneas 65 a 69 ponen a prueba la capacidad de utilizar de forma correcta el resultado del caso especial de la operación z, probando que el parser no malinterpreta los paréntesis a la hora de leer la operación.

Las líneas 71 a 73 tienen como único objetivo el probar la eficiencia temporal y de utilización de memoria del programa, utilizando operaciones recursivas con grandes valores que generan un gran número de llamadas a la propia operación.

Con la definición y la llamada de las líneas 75, 77, 79 y 81 se pretende probar la capacidad de almacenar una operación definida por el usuario que tenga una llamada a una operación que aun no esté definida (por lo que debería evaluarse a indefinido) y después definir esa operación faltante (por lo que debería evaluarse correctamente).

Las líneas 86 a 89 pretenden de nuevo poner a prueba la capacidad de recursividad del programa mediante una gran cantidad de llamadas a operaciones, así como la consistencia del código para realizar bien las operaciones.

Las líneas 93 a 97 tienen el fin de poner a prueba la utilización de signos negativos y operaciones de negación en distintos ámbitos de forma correcta.

De la línea 97 hasta la 110, se pone a prueba la capacidad del programa de tratar con listas, operaciones definidas por el usuario que utilizan listas y llamadas recursivas a operaciones que tratan y devuelven listas.

Las instrucciones de las líneas 112 a 121 tienen como único objetivo el probar la eficiencia en la utilización de recursos mediante llamadas a funciones con parámetros que originan resultados de gran tamaño.

Por último, las líneas 122 a 124 pretenden probar la capacidad de redefinir operaciones definidas por el usuario, además de probar el correcto tratamiento de listas de expresiones resultado de operaciones, así como del uso de variables existentes.
