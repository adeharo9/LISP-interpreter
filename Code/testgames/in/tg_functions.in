(define diff (x y) (+ x (- y)))
(define * (x y) (if (= x 0) 0 (+ y (* (diff x 1) y))))
(define / (x y) (if (< y x) (+ 1 (/ (diff x y) y)) (if (= x y) 1 0)))

(define true 1)
(define false 0)
(define xor (x y) (if (= x (not y)) 1 0))
(define nor (x y) (not (or x y)))
(define nand (x y) (not (and x y)))

(define ++ (x) (+ x 1))
(define -- (x) (diff x 1))

(define % (x y) (diff x (* y (/ x y))))
(define ^ (x y) (if (= y 0) 1 (* x (^ x (diff y 1)))))
(define ! (x) (if (= x 1) 1 (* x (! (diff x 1)))))

(define abs (x) (if (< x 0) (- x) x))
(define count (x) (if (= x 0) 0 (+ 1 (count (/ x 10)))))

(define > (x y) (< y x))
(define <= (x y) (or (< x y) (= x y)))
(define >= (x y) (or (< y x) (= x y)))
(define == (x y) (= x y))
(define != (x y) (not (= x y)))
(define max (x y) (if (< x y) y x))
(define min (x y) (if (< x y) x y))

(define NULL ())
(define length (L) (if (= L ()) 0 (+ 1 (length (tail L)))))
(define last (L) (if (= () (tail L)) (head L) (last (tail L))))
(define real (e f) (cons e (f)))
(define ceil (r) (if (= (last r) 0) r (cons (+ (head r) 1) (0))))
(define floor (r) (cons (head r) (0)))

****

EN DESARROLLO
(define round (r) (if (< (last r) 5) (floor r) (ceil r)))
