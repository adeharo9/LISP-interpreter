.TH "Environment" 3 "Miércoles, 7 de Diciembre de 2016" "Version v1.1" "Calculadora de expresiones aritméticas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Environment \- Representa un entorno de ejecución con todas las operaciones primitivas predefinidas, así como con todas las variables y operaciones definidas por el usuario\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Environment\&.hh>\fP
.SS "Métodos públicos"

.in +1c
.ti -1c
.RI "\fBEnvironment\fP ()"
.br
.RI "\fIConstructora por defecto\&. \fP"
.ti -1c
.RI "\fB~Environment\fP ()"
.br
.RI "\fIDestructora por defecto\&. \fP"
.ti -1c
.RI "void \fBadd_var\fP (string key, const \fBExpression\fP &exp)"
.br
.RI "\fIModificadora por adición de variable\&. \fP"
.ti -1c
.RI "void \fBadd_op\fP (string key, string parameters, string exp)"
.br
.RI "\fIModificadora por adición de operación\&. \fP"
.ti -1c
.RI "void \fBupdate_var\fP (string key, const \fBExpression\fP &exp)"
.br
.RI "\fIModificadora por actualización de variable\&. \fP"
.ti -1c
.RI "void \fBupdate_op\fP (string key, string parameters, string exp)"
.br
.RI "\fIModificadora por actualización de operación\&. \fP"
.ti -1c
.RI "void \fBerase_varspace\fP ()"
.br
.RI "\fIModificadora por actualización de operación\&. \fP"
.ti -1c
.RI "bool \fBis_primitive\fP (string key) const "
.br
.RI "\fIConsultora de existencia de operación primitiva\&. \fP"
.ti -1c
.RI "bool \fBis_op\fP (string key) const "
.br
.RI "\fIConsultora de existencia de operación\&. \fP"
.ti -1c
.RI "bool \fBexists\fP (string key) const "
.br
.RI "\fIConsultora de existencia\&. \fP"
.ti -1c
.RI "bool \fBexists_var\fP (string key) const "
.br
.RI "\fIConsultora de existencia de variable\&. \fP"
.ti -1c
.RI "bool \fBexists_op\fP (string key) const "
.br
.RI "\fIConsultora de existencia de operación\&. \fP"
.ti -1c
.RI "primitiveOperation \fBget_prim\fP (string key)"
.br
.RI "\fIConsultora de recuperación de operación primitiva\&. \fP"
.ti -1c
.RI "\fBExpression\fP \fBget_var\fP (string key)"
.br
.RI "\fIConsultora de recuperación de variable\&. \fP"
.ti -1c
.RI "pair< string, string > \fBget_op\fP (string key)"
.br
.RI "\fIConsultora de recuperación de operación\&. \fP"
.ti -1c
.RI "int \fBnum_pars_op\fP (string key)"
.br
.RI "\fIConsultora de número de parámetros de operación\&. \fP"
.ti -1c
.RI "void \fBwrite\fP () const "
.br
.RI "\fIOperación de escritura de todo el entorno de variables y operaciones definidas por el usuario\&. \fP"
.ti -1c
.RI "void \fBwrite_var\fP (string key)"
.br
.RI "\fIOperación de escritura de una variable concreta\&. \fP"
.ti -1c
.RI "void \fBwrite_op\fP (string key)"
.br
.RI "\fIOperación de escritura de una operación concreta\&. \fP"
.in -1c
.SH "Descripción detallada"
.PP 
Representa un entorno de ejecución con todas las operaciones primitivas predefinidas, así como con todas las variables y operaciones definidas por el usuario\&. 
.SH "Documentación del constructor y destructor"
.PP 
.SS "Environment::Environment ()"

.PP
Constructora por defecto\&. Se ejecuta automáticamente al declarar un nuevo entorno 
.PP
\fBPrecondición:\fP
.RS 4
\fICierto\fP 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Crea un objeto con mapa de operaciones primitivas 'primOpMap' del espacio de operaciones primitivas 'primOpSpace' inicializado con las operaciones primitivas, un espacio de variables 'varSpace' con mapa de variables 'varMap' vacío y un espacio de operaciones 'opSpace' con un mapa de operaciones 'opMap' vacío 
.RE
.PP

.SS "Environment::~Environment ()"

.PP
Destructora por defecto\&. Se ejecuta automáticamente al salir de un ámbito de visibilidad 
.PP
\fBPrecondición:\fP
.RS 4
\fICierto\fP 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Libera los recursos locales del parámetro implícito al salir de un ámbito de visibilidad 
.RE
.PP

.SH "Documentación de las funciones miembro"
.PP 
.SS "void Environment::add_op (string key, string parameters, string exp)"

.PP
Modificadora por adición de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; 'key' no corresponde al nombre de ninguna de las operaciones primitivas; el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito no contiene ninguna operación con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Se añade al mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito la operación con clave 'key', parámetros 'parameters' y expresión 'exp' 
.RE
.PP

.SS "void Environment::add_var (string key, const \fBExpression\fP & exp)"

.PP
Modificadora por adición de variable\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito no contiene ninguna variable con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Se añade al mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito la variable con clave 'key' y expresión 'exp' 
.RE
.PP

.SS "void Environment::erase_varspace ()"

.PP
Modificadora por actualización de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
\fICierto\fP 
.RE
.PP
\fBPostcondición:\fP
.RS 4
El espacio de variables varSpace del parámetro implícito pasa a estar vacío 
.RE
.PP

.SS "bool Environment::exists (string key) const"

.PP
Consultora de existencia\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve cierto si el string 'key' figura como clave de alguna variable u operación de algún mapa de algún espacio del parámetro implícito; en otro caso, devuelve falso 
.RE
.PP

.SS "bool Environment::exists_op (string key) const"

.PP
Consultora de existencia de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve cierto si la operación con clave 'key' existe en el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito; en otro caso, devuelve falso 
.RE
.PP

.SS "bool Environment::exists_var (string key) const"

.PP
Consultora de existencia de variable\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve cierto si la variable con clave 'key' existe en el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito; en otro caso, devuelve falso 
.RE
.PP

.SS "pair< string, string > Environment::get_op (string key)"

.PP
Consultora de recuperación de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito contiene una operación con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve los parámetros y la expresión, respectivamente en forma de pair, de la operación representada por la clave 'key' 
.RE
.PP

.SS "primitiveOperation Environment::get_prim (string key)"

.PP
Consultora de recuperación de operación primitiva\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de operaciones primitivas 'primOpMap' del espacio de operaciones primitivas 'primOpSpace' del parámetro implícito contiene una operación primitiva con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve la operación primitiva representada por la clave 'key' 
.RE
.PP

.SS "\fBExpression\fP Environment::get_var (string key)"

.PP
Consultora de recuperación de variable\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito contiene una variable con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve la expresión representada por la variable de clave 'key' 
.RE
.PP

.SS "bool Environment::is_op (string key) const"

.PP
Consultora de existencia de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve cierto si la operación de clave 'key' es una operación contenida en el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' o en el mapa de operaciones primitivas 'primOpMap' del espacio de operaciones primitivas 'primOpSpace'; en otro caso, devuelve falso 
.RE
.PP

.SS "bool Environment::is_primitive (string key) const"

.PP
Consultora de existencia de operación primitiva\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve cierto si la operación de clave 'key' es una operación primitiva contenida en el mapa de operaciones 'primOpMap' del espacio de operaciones primitivas 'primOpSpace'; en otro caso, devuelve falso 
.RE
.PP

.SS "int Environment::num_pars_op (string key)"

.PP
Consultora de número de parámetros de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito contiene una operación con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Devuelve el número de parámetros de la operación representada por la clave 'key' 
.RE
.PP

.SS "void Environment::update_op (string key, string parameters, string exp)"

.PP
Modificadora por actualización de operación\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; 'key' no corresponde al nombre de ninguna de las operaciones primitivas; el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito contiene una operación con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Los parámetros y la expresión de la operación con clave 'key' en el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito pasan a ser 'parameters' y 'exp', respectivamente 
.RE
.PP

.SS "void Environment::update_var (string key, const \fBExpression\fP & exp)"

.PP
Modificadora por actualización de variable\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito contiene una variable con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
La expresión de la variable con clave 'key' en el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito pasa a ser 'exp' 
.RE
.PP

.SS "void Environment::write () const"

.PP
Operación de escritura de todo el entorno de variables y operaciones definidas por el usuario\&. 
.PP
\fBPrecondición:\fP
.RS 4
\fICierto\fP 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Se ha escrito el contenido del espacio de variables 'varSpace' y del espacio de operaciones 'opSpace' por el canal estándar de salida, si lo tenían; en el caso del contenido del espacio de variables 'varSpace', si el resultado de evaluar la expresión de alguna de las variables es indefinido, se escribe 'indefinido'; si alguno o ambos espacios están vacíos, no se escribe nada en relacion al/los espacio/s vacío/s por el canal estándar de salida 
.RE
.PP

.SS "void Environment::write_op (string key)"

.PP
Operación de escritura de una operación concreta\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de operaciones 'opMap' del espacio de operaciones 'opSpace' del parámetro implícito contiene una operación con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Se ha escrito el contenido de la operación con clave 'key' por el canal estándar de salida 
.RE
.PP

.SS "void Environment::write_var (string key)"

.PP
Operación de escritura de una variable concreta\&. 
.PP
\fBPrecondición:\fP
.RS 4
'key' es un string no vacío; el mapa de variables 'varMap' del espacio de variables 'varSpace' del parámetro implícito contiene una variable con clave 'key' 
.RE
.PP
\fBPostcondición:\fP
.RS 4
Se ha escrito el contenido de la variable con clave 'key' por el canal estándar de salida; en caso que el resultado de evaluar la expresión sea indefinido, se escribe 'indefinido' 
.RE
.PP


.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Calculadora de expresiones aritméticas del código fuente\&.
